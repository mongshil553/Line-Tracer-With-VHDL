library ieee;
use ieee.std_logic_1164.all;

entity speed_selector is
	port(	phase : integer;
			line_sensor : in std_logic_vector(7 downto 0);
	
			speed_left_max : integer;
			speed_left_normal : integer;
			speed_left_min : integer;
			
			speed_right_max : integer;
			speed_right_normal : integer;
			speed_right_min : integer
			
			--speed_plus : integer;
	);
end speed_selector;

architecture design of speed_selector is
signal turning : boolean := 0;

component turn_checker
	port(	line_sensor : in std_logic_vector(7 downto 0);
			turning : boolean
	);
end component;

begin

	process(phase, line_sensor)
	begin
		case phase is
			when 0 => --stop
				speed_left_max <= 0; speed_left_normal <= 0; speed_left_min <= 0;
				speed_right_max <= 0; speed_right_normal <= 0; speed_right_min <= 0;
			when 1 => --loop
				speed_left_max <= 35000; speed_left_normal <= 20000; speed_left_min <= 0;
				speed_right_max <= 35000; speed_right_normal <= 20000; speed_right_min <= 0;
			when 2 => --pause
				speed_left_max <= 35000; speed_left_normal <= 20000; speed_left_min <= 0;
				speed_right_max <= 35000; speed_right_normal <= 20000; speed_right_min <= 0;
			when 3 => --twist
				speed_left_max <= 20000; speed_left_normal <= 15000; speed_left_min <= 0;
				speed_right_max <= 20000; speed_right_normal <= 15000; speed_right_min <= 0;
			when 4 => 
				null;
			when others =>
				null;
		end case;
	end if;
	
	tc: turn_checker port map(line_sensor=>line_sensor, turnig=>turning);
end design;